setwd("C:/Users/CarlinML/DACSS-690R/Second_Deliverable")
setwd("C:/Users/CarlinML/DACSS-690R/Second_Deliverable")
getwd()
folder="dataFiles"
fileName="Social_Media_and_Mental_Health.csv"
fileToRead=file.path(folder,fileName)
fileToRead
SMMH_data=read.csv(fileToRead)
setwd("C:/Users/CarlinML/DACSS-690R/First_Deliverable")
setwd("C:/Users/CarlinML/DACSS-690R/First_Deliverable")
getwd()
setwd("C:/Users/CarlinML/DACSS-690R/First_Deliverable")
getwd()
getwd()
getwd("C:/Users/CarlinML/DACSS-690R/First_Deliverable")
setwd("C:/Users/CarlinML/DACSS-690R/First_Deliverable")
getwd()
library(readxl)
folder="dataFiles"
fileName="UMassChan_ClerkshipGrades.xlsx"
fileToRead=file.path(folder,fileName)
fileToRead
ClerkshipGrades_data=read_xlsx(fileToRead)
View(ClerkshipGrades_data)
View(ClerkshipGrades_data)
setwd("C:/Users/CarlinML/DACSS-690R/Second_Deliverable")
getwd()
library(readxl)
destfile <- path.expand("ClerkshipGrades.xlsx")
url      <- paste0("https://github.com/DACSS-690R/First_Deliverable/raw/refs/heads/main/dataFiles/UMassChan_ClerkshipGrades.xlsx")
download.file(url, destfile = destfile, mode = "wb")
ClerkshipGrades_dirty <- read_xlsx(destfile, skip=1)
ClerkshipGrades_dirty
ClerkshipGrades_dirty[,]=sapply(ClerkshipGrades_dirty[,],trimws)
ClerkshipGrades_clean=ClerkshipGrades_dirty[,]
View(ClerkshipGrades_clean)
str(ClerkshipGrades_clean)
ClerkshipGrades_clean <- rename(ClerkshipGrades_clean,
NBME_Letter = `NBME-Written_Letter`,
NBME_Numeric = `NBME-Written_Numeric`)
library("dplyr")
ClerkshipGrades_clean <- rename(ClerkshipGrades_clean,
NBME_Letter = `NBME-Written_Letter`,
NBME_Numeric = `NBME-Written_Numeric`)
table(ClerkshipGrades_clean$Subject) # no cleaning needed
table(ClerkshipGrades_clean$Catalog) # no cleaning needed
table(ClerkshipGrades_clean$Session) # no cleaning needed
table(ClerkshipGrades_clean$Location) # no cleaning needed
table(ClerkshipGrades_clean$Final_Letter)
ClerkshipGrades_clean <- ClerkshipGrades_clean %>%
mutate(Final_Letter2 = recode(Final_Letter,
"HH" = "High Honors",
"H" = "Honors",
"P" = "Pass",
"S" = "Satisfactory",
"F" = "Fail",
"I" = "Incomplete"))
table(ClerkshipGrades_clean$Final_Letter2)
table(ClerkshipGrades_clean$SPE_Letter)
ClerkshipGrades_clean <- ClerkshipGrades_clean %>%
mutate(SPE_Letter2 = recode(SPE_Letter,
"HONORS" = "Honors"))
table(ClerkshipGrades_clean$SPE_Letter2)
table(ClerkshipGrades_clean$NBME_Letter)
ClerkshipGrades_clean <- ClerkshipGrades_clean %>%
mutate(NBME_Letter2 = recode(NBME_Letter,
"HIGH HONORS" = "High Honors",
"HONORS" = "Honors",
"PASS" = "Pass"))
table(ClerkshipGrades_clean$NBME_Letter2)
table(ClerkshipGrades_clean$OSCE_Letter)
ClerkshipGrades_clean <- ClerkshipGrades_clean %>%
mutate(OSCE_Letter2 = recode(OSCE_Letter,
"HIGH HONORS" = "High Honors",
"HONORS" = "Honors",
"PASS" = "Pass"))
table(ClerkshipGrades_clean$OSCE_Letter2)
ClerkshipGrades_clean[!complete.cases(ClerkshipGrades_clean),]
ClerkshipGrades_clean[1,]
colSums(is.na(apply(ClerkshipGrades_clean[,c(10,12,14,16)],2, as.numeric)))
detectWrongNA= function(col){col[grep("[^\\d+\\.*\\d*]", col, perl=T,invert = F)]}
badSymbolNum=sapply(ClerkshipGrades_clean[, c('Final_Numeric','SPE_Numeric','NBME_Numeric', 'OSCE_Numeric')],detectWrongNA)
badSymbolNum_unlist=unlist(badSymbolNum)
badSymbolNum_vector=unique(badSymbolNum_unlist)
badSymbolNum_vector
ClerkshipGrades_clean[, c('Final_Numeric','SPE_Numeric','NBME_Numeric', 'OSCE_Numeric')]=lapply(ClerkshipGrades_clean[, c('Final_Numeric','SPE_Numeric','NBME_Numeric', 'OSCE_Numeric')],function(col) ifelse((col %in% badSymbolNum_vector), NA, col))
ClerkshipGrades_clean
str(ClerkshipGrades_clean)
ClerkshipGrades_clean[!complete.cases(ClerkshipGrades_clean),]
ClerkshipGrades_clean[1,]
colSums(is.na(apply(ClerkshipGrades_clean[,c(10,12,14,16)],2, as.numeric)))
detectWrongNA= function(col){col[grep("[^\\d+\\.*\\d*]", col, perl=T,invert = F)]}
badSymbolNum=sapply(ClerkshipGrades_clean[, c('Final_Numeric','SPE_Numeric','NBME_Numeric', 'OSCE_Numeric')],detectWrongNA)
badSymbolNum_unlist=unlist(badSymbolNum)
badSymbolNum_vector=unique(badSymbolNum_unlist)
badSymbolNum_vector
ClerkshipGrades_clean[, c('Final_Numeric','SPE_Numeric','NBME_Numeric', 'OSCE_Numeric')]=lapply(ClerkshipGrades_clean[, c('Final_Numeric','SPE_Numeric','NBME_Numeric', 'OSCE_Numeric')],function(col) ifelse((col %in% badSymbolNum_vector), NA, col))
ClerkshipGrades_clean
str(ClerkshipGrades_clean)
folder <- "DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
write.csv(SMMH_clean,file.path(folder,"ClerkshipGrades_clean.csv"))
} else {
write.csv(ClerkshipGrades_clean,file.path(folder,"ClerkshipGrades_clean.csv"))}
linkClerkshipGrades_clean='https://github.com/DACSS-690R/Second_Deliverable/raw/main/DataCleanAndFormatted/ClerkshipGrades_clean.csv'
ClerkshipGrades_clean=read.csv(linkClerkshipGrades_clean)
str(ClerkshipGrades_clean)
ClerkshipGrades_clean[,19:22] <- lapply(ClerkshipGrades_clean[,19:22],toupper)
folder = "DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
saveRDS(ClerkshipGrades_clean,file.path(folder,"
ClerkshipGrades_formatted.RDS"))
} else {
saveRDS(ClerkshipGrades_clean,file.path(folder,"ClerkshipGrades_formatted.RDS"))
}
setwd("C:/Users/CarlinML/DACSS-690R/Third_Deliverable")
getwd()
ClerkshipGrades <- readRDS(gzcon(url("https://github.com/DACSS-690R/Second_Deliverable/raw/main/DataCleanAndFormatted/ClerkshipGrades_formatted.RDS")))
names(ClerkshipGrades)[names(ClerkshipGrades) == 'Session...6'] <- 'Session'
names(ClerkshipGrades)[names(ClerkshipGrades) == 'Session...7'] <- 'Session_Code'
names(ClerkshipGrades)[names(ClerkshipGrades) == 'Location'] <- 'Location_Code'
ClerkshipGrades$Location_new = ClerkshipGrades$Location_Description
str(ClerkshipGrades) # 6427 rows
library(readxl)
folder="Data"
fileName="Gender_Ethnicity_info.xlsx"
fileToRead=file.path(folder,fileName)
fileToRead
Gender_Ethnicity=read_xlsx(fileToRead)
str(Gender_Ethnicity) # 1004 rows
ClerkshipGrades2 <- merge(ClerkshipGrades,Gender_Ethnicity,all.x=TRUE, by.x="ID", by.y="ID")
folder="Data"
fileName="Location_info.xlsx"
fileToRead=file.path(folder,fileName)
fileToRead
Locations=read_xlsx(fileToRead)
str(Locations) # 22 rows
str(merge(ClerkshipGrades,Locations, by.x='Location_new', by.y='Location'))
str(merge(ClerkshipGrades,Locations, by.x='Location_code', by.y='Location'))
linkClerkshipGrades_clean='https://github.com/DACSS-690R/Second_Deliverable/raw/refs/heads/main/DataCleanAndFormatted/ClerkshipGrades_clean.csv'
ClerkshipGrades_clean=read.csv(linkClerkshipGrades_clean)
str(ClerkshipGrades_clean)
folder = "DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
saveRDS(ClerkshipGrades_clean,file.path(folder,"
ClerkshipGrades_formatted.RDS"))
} else {
saveRDS(ClerkshipGrades_clean,file.path(folder,"ClerkshipGrades_formatted.RDS"))
}
folder = "DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
saveRDS(ClerkshipGrades_clean,file.path(folder,"
ClerkshipGrades_formatted.RDS"))
} else {
saveRDS(ClerkshipGrades_clean,file.path(folder,"ClerkshipGrades_formatted.RDS"))
}
ClerkshipGrades <- readRDS(gzcon(url("https://github.com/DACSS-690R/Second_Deliverable/raw/main/DataCleanAndFormatted/ClerkshipGrades_formatted.RDS")))
names(ClerkshipGrades)[names(ClerkshipGrades) == 'Session...6'] <- 'Session'
names(ClerkshipGrades)[names(ClerkshipGrades) == 'Session...7'] <- 'Session_Code'
names(ClerkshipGrades)[names(ClerkshipGrades) == 'Location'] <- 'Location_Code'
ClerkshipGrades$Location_new = ClerkshipGrades$Location_Description
str(ClerkshipGrades) # 6427 rows
linkClerkshipGrades_clean='https://github.com/DACSS-690R/Second_Deliverable/raw/main/DataCleanAndFormatted/ClerkshipGrades_clean.csv'
ClerkshipGrades_clean=read.csv(linkClerkshipGrades_clean)
str(ClerkshipGrades_clean)
folder = "DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
saveRDS(ClerkshipGrades_clean,file.path(folder,"
ClerkshipGrades_formatted.RDS"))
} else {
saveRDS(ClerkshipGrades_clean,file.path(folder,"ClerkshipGrades_formatted.RDS"))
}
str(ClerkshipGrades_clean)
folder = "DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
saveRDS(ClerkshipGrades_clean,file.path(folder,"
ClerkshipGrades_formatted.RDS"))
} else {
saveRDS(ClerkshipGrades_clean,file.path(folder,"ClerkshipGrades_formatted.RDS"))
}
saveRDS(ClerkshipGrades_clean,file.path(folder,"ClerkshipGrades_formatted.RDS"))
setwd("C:/Users/CarlinML/DACSS-690R/Second_Deliverable")
getwd()
folder = "DataCleanAndFormatted"
# Check if the folder exists
if (!dir.exists(folder)) {
# Create the folder
dir.create(folder)
saveRDS(ClerkshipGrades_clean,file.path(folder,"
ClerkshipGrades_formatted.RDS"))
} else {
saveRDS(ClerkshipGrades_clean,file.path(folder,"ClerkshipGrades_formatted.RDS"))
}
setwd("C:/Users/CarlinML/DACSS-690R/Third_Deliverable")
getwd()
ClerkshipGrades <- readRDS(gzcon(url("https://github.com/DACSS-690R/Second_Deliverable/raw/main/DataCleanAndFormatted/ClerkshipGrades_formatted.RDS")))
names(ClerkshipGrades)[names(ClerkshipGrades) == 'Session...6'] <- 'Session'
names(ClerkshipGrades)[names(ClerkshipGrades) == 'Session...7'] <- 'Session_Code'
names(ClerkshipGrades)[names(ClerkshipGrades) == 'Location'] <- 'Location_Code'
ClerkshipGrades$Location_new = ClerkshipGrades$Location_Description
str(ClerkshipGrades) # 6427 rows
library(readxl)
folder="Data"
fileName="Gender_Ethnicity_info.xlsx"
fileToRead=file.path(folder,fileName)
fileToRead
Gender_Ethnicity=read_xlsx(fileToRead)
str(Gender_Ethnicity) # 1004 rows
ClerkshipGrades2 <- merge(ClerkshipGrades,Gender_Ethnicity,all.x=TRUE, by.x="ID", by.y="ID")
str(ClerkshipGrades2) # 6427 rows
folder="Data"
fileName="Location_info.xlsx"
fileToRead=file.path(folder,fileName)
fileToRead
Locations=read_xlsx(fileToRead)
str(Locations) # 22 rows
str(merge(ClerkshipGrades,Locations, by.x='Location_code', by.y='Location'))
str(merge(ClerkshipGrades,Locations, by.x='Location_Code', by.y='Location'))
# 1877 matched rows
onlyInGrades=sort(setdiff(ClerkshipGrades2$Location_new,Locations$Location))
onlyInGrades
onlyInLocations=sort(setdiff(Locations$Location, ClerkshipGrades2$Location_new))
onlyInLocations
library(stringdist)
stringdist::stringdist(onlyInGrades[1],onlyInLocations,method = 'jaccard')
TheMatch<-character()
mindist<-integer()
sortedmatches<-character()
for (i in 1:length(onlyInGrades) ) {
allDistances<-stringdist::stringdist(onlyInGrades[i],onlyInLocations,method = 'jw')
mindist[i]=min(allDistances)
TheMatch[i]<-onlyInLocations[which.min(allDistances)]
}
fuzzyOutput=data.frame(input=onlyInGrades,possible_match=TheMatch,divergence=mindist,  stringsAsFactors = F)
fuzzyMatch_notperfect=fuzzyOutput[order(-fuzzyOutput$divergence),]
fuzzyOutput[order(-fuzzyOutput$divergence),]
TheMatch<-character()
mindist<-integer()
sortedmatches<-character()
for (i in 1:length(onlyInGrades) ) {
allDistances<-stringdist::stringdist(onlyInGrades[i],onlyInLocations,method = 'jw')
mindist[i]=min(allDistances)
TheMatch[i]<-onlyInLocations[which.min(allDistances)]
}
fuzzyOutput=data.frame(input=onlyInGrades,possible_match=TheMatch,divergence=mindist,  stringsAsFactors = F)
fuzzyOutput[order(-fuzzyOutput$divergence),]
fuzzyMatch_notperfect=fuzzyOutput[order(-fuzzyOutput$divergence),]
fuzzyMatch_notperfect=fuzzyOutput[order(-fuzzyOutput$divergence),]
ClerkshipGrades <- readRDS(gzcon(url("https://github.com/DACSS-690R/Second_Deliverable/raw/main/DataCleanAndFormatted/ClerkshipGrades_formatted.RDS")))
names(ClerkshipGrades)[names(ClerkshipGrades) == 'Session...6'] <- 'Session'
names(ClerkshipGrades)[names(ClerkshipGrades) == 'Session...7'] <- 'Session_Code'
names(ClerkshipGrades)[names(ClerkshipGrades) == 'Location'] <- 'Location_Code'
ClerkshipGrades$Location_new = ClerkshipGrades$Location_Description
str(ClerkshipGrades) # 6427 rows
library(readxl)
folder="Data"
fileName="Gender_Ethnicity_info.xlsx"
fileToRead=file.path(folder,fileName)
fileToRead
Gender_Ethnicity=read_xlsx(fileToRead)
str(Gender_Ethnicity) # 1004 rows
ClerkshipGrades2 <- merge(ClerkshipGrades,Gender_Ethnicity,all.x=TRUE, by.x="ID", by.y="ID")
str(ClerkshipGrades2) # 6427 rows
folder="Data"
fileName="Location_info.xlsx"
fileToRead=file.path(folder,fileName)
fileToRead
Locations=read_xlsx(fileToRead)
str(Locations) # 22 rows
str(merge(ClerkshipGrades2,Locations, by.x='Location_Code', by.y='Location'))
# 1877 matched rows
onlyInGrades=sort(setdiff(ClerkshipGrades2$Location_new,Locations$Location))
onlyInGrades
onlyInLocations=sort(setdiff(Locations$Location, ClerkshipGrades2$Location_new))
onlyInLocations
library(stringdist)
stringdist::stringdist(onlyInGrades[1],onlyInLocations,method = 'jaccard')
TheMatch<-character()
mindist<-integer()
sortedmatches<-character()
for (i in 1:length(onlyInGrades) ) {
allDistances<-stringdist::stringdist(onlyInGrades[i],onlyInLocations,method = 'jw')
mindist[i]=min(allDistances)
TheMatch[i]<-onlyInLocations[which.min(allDistances)]
}
fuzzyOutput=data.frame(input=onlyInGrades,possible_match=TheMatch,divergence=mindist,  stringsAsFactors = F)
fuzzyMatch_notperfect=fuzzyOutput[order(-fuzzyOutput$divergence),]
setwd("C:/Users/CarlinML/DACSS-690R/Third_Deliverable")
getwd()
ClerkshipGrades <- readRDS(gzcon(url("https://github.com/DACSS-690R/Second_Deliverable/raw/main/DataCleanAndFormatted/ClerkshipGrades_formatted.RDS")))
names(ClerkshipGrades)[names(ClerkshipGrades) == 'Session...6'] <- 'Session'
names(ClerkshipGrades)[names(ClerkshipGrades) == 'Session...7'] <- 'Session_Code'
names(ClerkshipGrades)[names(ClerkshipGrades) == 'Location'] <- 'Location_Code'
ClerkshipGrades$Location_new = ClerkshipGrades$Location_Description
str(ClerkshipGrades) # 6427 rows
linkClerkshipGrades_clean='https://github.com/DACSS-690R/Second_Deliverable/raw/main/DataCleanAndFormatted/ClerkshipGrades_clean.csv'
ClerkshipGrades_clean=read.csv(linkClerkshipGrades_clean)
str(ClerkshipGrades_clean)
folder = "DataCleanAndFormatted"
saveRDS(ClerkshipGrades_clean,file.path(folder,"ClerkshipGrades_formatted.RDS"))
